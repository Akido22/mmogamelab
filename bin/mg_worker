#!/usr/bin/python2.6

from mg.core import Instance
from mg.core.web import WebDaemon, WebApplication
from mg.core.worker import MultiapplicationWebDaemon, ApplicationFactory
from concurrence import dispatch, Tasklet
from mg.core.cass import CassandraPool
from mg.core.memcached import MemcachedPool, Memcached
import traceback
import json
import mg.core.cluster
import sys
import re

def main():
    try:
        inst = Instance()
        inst.set_server_id("worker")

        # Running internal daemon
        conf = inst.download_config()
        dbpool = CassandraPool(conf["cassandra"])
        mcpool = MemcachedPool(conf["memcached"][0])
        int_mc = Memcached(mcpool, prefix="mg-")
        int_app = WebApplication(inst, dbpool, "metagam", int_mc, "int", "mg-")
        int_daemon = WebDaemon(inst)
        int_daemon.app = int_app
        int_app.modules.load(["mg.core.worker.Worker"])
        int_app.tag = "int"
        int_port = int_daemon.serve_any_port("0.0.0.0")
        inst.int_app = int_app

        # Running external daemon
        ext_daemon = MultiapplicationWebDaemon(inst, dbpool, mcpool)
        ext_port = ext_daemon.serve_any_port("0.0.0.0")

        # Application factory
        inst.appfactory = ApplicationFactory(inst, dbpool, mcpool)
        inst.appfactory.add_permanent(int_app)

        # Registering
        res = mg.core.cluster.dir_query("/director/ready", {
            "type": "worker",
            "port": int_port,
            "parent": sys.argv[1],
            "id": sys.argv[2],
            "params": json.dumps({
                "ext_port": ext_port,
                "class": "metagam",
            }),
        })
        inst.set_server_id(res["server_id"], re.sub(r'^\d+\.\d+\.\d+\.\d+-server-\d+-', '', res["server_id"]))
        while True:
            try:
                int_app.hooks.call("core.fastidle")
            except:
                traceback.print_exc()
            Tasklet.sleep(1)
    except RuntimeError as e:
        print e
        quit(1)
    except:
        traceback.print_exc()
        quit(1)

dispatch(main)

