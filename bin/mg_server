#!/usr/bin/python2.6

from mg.core import Instance, ApplicationFactory
from mg.core.web import WebDaemon, WebApplication
from concurrence import dispatch, Tasklet, quit
import concurrence.core
from mg.core.cass import CassandraPool
from mg.core.memcached import MemcachedPool, Memcached
import traceback
import json
import optparse

def main():
    try:
        # Parsing configuration
        parser = optparse.OptionParser()
        parser.add_option("-n", "--nginx", action="store_true", dest="nginx", help="Manage nginx configuration")
        (options, args) = parser.parse_args()

        # Running daemon
        inst = Instance()
        daemon = WebDaemon(inst)
        conf = daemon.download_config()
        dbpool = CassandraPool(conf["cassandra"])
        mc = Memcached(MemcachedPool(conf["memcached"][0]), prefix="mg_")
        app = WebApplication(inst, dbpool, "metagam", mc, "int", "mg_")
        daemon.app = app
        app.modules.load(["mg.core.server.Server"])
        port = daemon.serve_any_port("0.0.0.0")
        app.server_id = port

        # Application factory
        inst.appfactory = ApplicationFactory(inst)
        inst.appfactory.add_permanent(app)

        # Registering
        res = app.hooks.call("cluster.query_director", "/director/ready", {
            "type": "server",
            "port": port,
            "id": app.server_id,
            "params": json.dumps({
                "backend": 1,
                "nginx": options.nginx
            })
        })
        inst.server_id = res["server_id"]
        while True:
            try:
                app.hooks.call("core.fastidle")
            except:
                traceback.print_exc()
            Tasklet.sleep(1)
    except SystemExit:
        quit(0)
    except RuntimeError as e:
        print e
        quit(1)
    except:
        traceback.print_exc()
        quit(1)

dispatch(main)

