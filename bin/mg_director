#!/usr/bin/python2.6

from mg.core import Instance, ApplicationFactory
from mg.core.web import WebDaemon, WebApplication
from concurrence import dispatch, Tasklet
from mg.core.cass import CassandraPool
from mg.core.memcached import MemcachedPool, Memcached
import traceback
import json
import logging

def main():
    try:
        inst = Instance()
        inst.set_server_id("director");
        daemon = WebDaemon(inst)
        dbpool = CassandraPool((("director-db", 9160),))
        mc = Memcached(MemcachedPool(("director-mc", 11211)), prefix="mg-")
        app = WebApplication(inst, dbpool, "metagam", mc, "int", "mg-")
        daemon.app = app
        app.modules.load(["mg.core.director.CassandraStruct"])
        app.dbrestruct()
        app.modules.load(["mg.core.director.Director"])
        port = daemon.serve(("0.0.0.0", 3000))
        inst.appfactory = ApplicationFactory(inst)
        inst.appfactory.add_permanent(app)
        inst.int_app = app
        Tasklet.new(monitor)(app)
        Tasklet.new(app.hooks.call)("queue.process")
        while True:
            try:
                app.hooks.call("core.fastidle")
            except:
                traceback.print_exc()
            Tasklet.sleep(1)
    except RuntimeError as e:
        logging.error(e)
        quit(1)
    except BaseException as e:
        logging.exception(e)
        quit(1)

def monitor(app):
    while True:
        try:
            app.hooks.call("monitor.check")
        except:
            traceback.print_exc()
        Tasklet.sleep(10)

dispatch(main)

