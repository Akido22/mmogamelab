#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

from mg import *
from concurrence import *
import os
import logging
import sys
import json
import re
import time
import dircache

def main():
    try:
        if len(sys.argv) != 2:
            sys.stderr.write("usage: mg_db_restore <db_host>\n")
            os._exit(1)
        # logging
        modlogger = logging.getLogger("")
        modlogger.setLevel(logging.DEBUG)
        stderr_channel = logging.StreamHandler()
        stderr_channel.setLevel(logging.DEBUG)
        modlogger.addHandler(stderr_channel)
        # database
        dbpool = CassandraPool(((sys.argv[1], 9160),), size=1)
        now = time.time() * 1000
        for dirent in dircache.listdir("."):
            info = os.stat(dirent)
            if info.st_mode & 040000:
                keyspace = dirent
                print keyspace
                db = Cassandra(dbpool, keyspace, mc=None)
                for ent in dircache.listdir(dirent):
                    m = re.match(r'^(\S+).json', ent)
                    if m:
                        family = m.group(1)
                        print " - %s" % (family)
                        f = open("%s/%s" % (dirent, ent), "r")
                        for line in f:
                            row = json.loads(line.strip())
                            for key, val in row.iteritems():
                                if type(key) is unicode:
                                    key = key.encode("utf-8")
                                mutations = []
                                for col_name, col_value in val.iteritems():
                                    if type(col_name) is unicode:
                                        col_name = col_name.encode("utf-8")
                                    if type(col_value) is unicode:
                                        col_value = col_value.encode("utf-8")
                                    mutations.append(Mutation(ColumnOrSuperColumn(Column(name=col_name, value=col_value, timestamp=now))))
                                mutations = {key: {family: mutations}}
                                db.batch_mutate(mutations, ConsistencyLevel.ONE)
                        f.close()
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

