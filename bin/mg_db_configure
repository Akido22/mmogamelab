#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

from mg import *
from concurrence import dispatch, quit
import os
import logging
import sys
import json
import re
import time

key_cache_size = 50000
key_cache_save_period_in_seconds = 3600
memtable_throughput_in_mb = 10
memtable_operations_in_millions = 100000 / 1e6
gc_grace_seconds = 86400 * 10
min_compaction_threshold = 2
max_compaction_threshold = 4

def main():
    try:
        if len(sys.argv) != 2:
            print "usage: mg_db_configure <keyspace>"
            os._exit(1)
        inst = Instance("db_cleanup")
        inst.download_config()
        mc = Memcached(inst.mcpool)
        db = inst.dbpool.sys_connection()
        db.cass.set_keyspace("system")
        for cfdef in db.cass.describe_keyspace(sys.argv[1]).cf_defs:
            changed = False
            if cfdef.key_cache_size != key_cache_size:
                cfdef.key_cache_size = key_cache_size
                changed = True
            if cfdef.key_cache_save_period_in_seconds != key_cache_save_period_in_seconds:
                cfdef.key_cache_save_period_in_seconds = key_cache_save_period_in_seconds
                changed = True
            if cfdef.memtable_throughput_in_mb != memtable_throughput_in_mb:
                cfdef.memtable_throughput_in_mb = memtable_throughput_in_mb
                changed = True
            if cfdef.memtable_operations_in_millions != memtable_operations_in_millions:
                cfdef.memtable_operations_in_millions = memtable_operations_in_millions
                changed = True
            if cfdef.gc_grace_seconds != gc_grace_seconds:
                cfdef.gc_grace_seconds = gc_grace_seconds
                changed = True
            if cfdef.min_compaction_threshold != min_compaction_threshold:
                cfdef.min_compaction_threshold = min_compaction_threshold
                changed = True
            if cfdef.max_compaction_threshold != max_compaction_threshold:
                cfdef.max_compaction_threshold = max_compaction_threshold
                changed = True
            if changed:
                print "updating %s.%s" % (cfdef.keyspace, cfdef.name)
                db.cass.system_update_column_family(cfdef)
                while True:
                    versions = db.cass.describe_schema_versions()
                    ver_list = [v for v in versions.keys() if v != 'UNREACHABLE']
                    if len(ver_list) < 2:
                        print "Cluster schema agree: %s" % versions
                        break
                    else:
                        print "Cluster schema not yet agree: %s" % versions
                        Tasklet.sleep(3)
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

