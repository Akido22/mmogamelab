#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

from mg import *
from concurrence import dispatch, quit
import os
import logging
import sys
import json
import re
import time

token_ring = 2 ** 127
parts = 256
token_part = token_ring / parts
re_app = re.compile('^(.+?)-(.+)$')

def main():
    try:
        if len(sys.argv) != 2:
            print "usage: mg_db_cleanup <app>"
            os._exit(1)
        inst = Instance("db_cleanup")
        inst.download_config()
        mc = Memcached(inst.mcpool)
        db = inst.dbpool.dbget("main", mc)
        created = set()
        now = time.time() * 1000
        for family in ["Objects", "Indexes"]:
            for part in xrange(0, parts):
                start_token = '%d' % (part * token_part)
                end_token = '%d' % (((part + 1) * token_part) % token_ring)
                lst = db.get_range_slices(ColumnParent(family), SlicePredicate(slice_range=SliceRange("", "", False, 1000000000)), KeyRange(count=10000000, start_token=start_token, end_token=end_token), ConsistencyLevel.ONE)
                for ent in lst:
                    if len(ent.columns):
                        m = re_app.match(ent.key)
                        if m:
                            app, key = m.group(1, 2)
                            if app == sys.argv[1]:
                                print "removing %s/%s" % (family, key)
                                db.remove(ent.key, ColumnPath(family), now, ConsistencyLevel.ONE)
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

