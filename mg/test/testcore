#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

import unittest
from concurrence import dispatch, Tasklet

from mg.core import *
from mg.stor.db import DatabasePool
from mg.stor.mc import Memcached

from cassandra.ttypes import *

class TestMemcached(unittest.TestCase):
    def setUp(self):
        pass

    def test00(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        try:
            app.db().system_drop_keyspace("mgtest")
        except Exception, e:
            pass

    def test01(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        list = []
        app.hooks.call("core.loaded_modules", list)
        self.assertEqual(len(list), 0)

        app.modules.load(["test.Test1"])
        list = []
        app.hooks.call("core.loaded_modules", list)
        self.assertEqual(len(list), 1)
        self.assertEqual(list[0], "test.Test1")

        app.modules.load(["db.CommonDatabaseStruct"])
        dbstruct = {}
        app.hooks.call("core.dbstruct", dbstruct)
        self.assertTrue(len(dbstruct) > 0)
        self.assertTrue("Core" in dbstruct)
        app.hooks.call("core.dbapply", dbstruct)

        app.config.load_groups(["a", "b", "c"])
        self.assertTrue("a" in app.config._config)
        self.assertTrue("b" in app.config._config)
        self.assertTrue("c" in app.config._config)
        self.assertFalse("d" in app.config._config)
        app.config.set("a.key1", "value1")
        self.assertEqual(app.config.get("a.key1"), "value1")
        app.config.store()

    def test02(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        self.assertEqual(app.config.get("a.key1"), "value1")
        app.config.set("a.key2", "value2")
        app.config.delete("a.key1")
        app.config.store()
        self.assertEqual(app.config.get("a.key1"), None)
        self.assertEqual(app.config.get("a.key2"), "value2")

    def test03(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        self.assertEqual(app.config.get("a.key1"), None)
        self.assertEqual(app.config.get("a.key2"), "value2")
        self.assertTrue("a" in app.config._config)
        self.assertFalse("b" in app.config._config)
        self.assertFalse("c" in app.config._config)
        self.assertFalse("d" in app.config._config)

    def test04(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        app.modules.load(["test.Test1"])
        app.hooks.store()

    def test05(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        self.assertEqual(len(app.hooks._groups), 0)
        list = []
        app.hooks.call("core.loaded_modules", list)
        self.assertEqual(len(app.hooks._groups), 0)
        app.hooks.call("grp1.test1")
        self.assertEqual(len(app.hooks._groups), 1)
        self.assertTrue("grp1" in app.hooks._groups)
        app.hooks.load_handlers(["grp1.test2", "grp2.test3"])
        self.assertEqual(len(app.hooks._groups), 2)
        self.assertTrue("grp1" in app.hooks._groups)
        self.assertTrue("grp2" in app.hooks._groups)

    def test06(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        app.modules.load(["test.Test2"])
        app.hooks.store()

    def test07(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        self.assertEqual(len(app.hooks._groups), 0)
        app.hooks.call("grp1.test1")
        self.assertEqual(len(app.hooks._groups), 1)
        self.assertTrue("grp1" in app.hooks._groups)
        self.assertTrue("test.Test1" not in app.hooks._groups["grp1"]["test1"])
        self.assertTrue("test.Test2" in app.hooks._groups["grp1"]["test1"])
        app.modules.load(["test.Test1"])
        app.hooks.store()

    def test08(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        self.assertEqual(len(app.hooks._groups), 0)
        app.hooks.call("grp1.test1")
        self.assertEqual(len(app.hooks._groups), 1)
        self.assertTrue("grp1" in app.hooks._groups)
        self.assertTrue("test.Test1" in app.hooks._groups["grp1"]["test1"])
        self.assertTrue("test.Test2" in app.hooks._groups["grp1"]["test1"])

    def test09(self):
        app = Application(inst=Instance(), dbpool=DatabasePool(), keyspace="mgtest", mc=Memcached(prefix="mgtest_"))
        app.modules.load(["test.TestJoin"])
        self.assertEqual(app.hooks.call("join.empty"), None)
        self.assertEqual(app.hooks.call("join.single"), "single")
        self.assertEqual(app.hooks.call("join.prio1"), "prio2")
        self.assertEqual(app.hooks.call("join.prio2"), "prio1")
        self.assertEqual(app.hooks.call("join.prio3"), "prio1")
        self.assertEqual(app.hooks.call("join.filter1", 2), 2)
        self.assertEqual(app.hooks.call("join.filter2", 2), 4)
        self.assertEqual(app.hooks.call("join.filter3", 2), 14)
        self.assertEqual(app.hooks.call("join.immed", 2), "immed")

if __name__ == "__main__":
    dispatch(unittest.main)
