#!/usr/bin/python2.6

# This file is a part of Metagam project.
#
# Metagam is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# Metagam is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Metagam.  If not, see <http://www.gnu.org/licenses/>.

# -*- coding: utf-8 -*-

from mg import *
from concurrence import *
import os
import logging
import sys
import json
import re
import time
import dircache

re_project_object = re.compile(r'^Project_Object_([a-f0-9]{32})$')
re_object = re.compile(r'^(\S+?)_Object_(.+)$')
re_index = re.compile(r'(\S+?)_(.+?)_Index_(eq.*)$')
re_search = re.compile(r'(\S+?)_Search_(.+)$')

def convert_db(dirent, created):
    for ent in dircache.listdir("old/%s" % dirent):
        inf = open("old/%s/%s" % (dirent, ent), "r")
        if ent == "Data.json":
            if len(dirent) == 32:
                for line in inf:
                    ent = json.loads(line)
                    for key, val in ent.iteritems():
                        m = re_object.match(key)
                        if m:
                            cls, uuid = m.group(1, 2)
                            filename = "new/games/%s_Objects.json" % cls
                            key = "%s_%s" % (dirent, uuid)
                        else:
                            m = re_index.match(key)
                            if m:
                                cls, index_name, index_equals = m.group(1, 2, 3)
                                filename = "new/games/%s_Indexes.json" % cls
                                key = "%s_%s_Index_%s" % (dirent, index_name, index_equals)
                            else:
                                m = re_search.match(key)
                                if m:
                                    cls, tag = m.group(1, 2)
                                    filename = "new/games/%s_Search.json" % cls
                                    key = "%s_%s" % (dirent, tag)
                                else:
                                    print "unknown row key in old/%s/Data.json: %s" % (dirent, key)
                    if filename in created:
                        outf = open(filename, "a")
                    else:
                        outf = open(filename, "w")
                        created.add(filename)
                    outf.write(json.dumps({key: val}))
                    outf.write("\n")
                    outf.close()
            else:
                os.mkdir("new/%s" % dirent)
                outf = open("new/%s/Data.json" % dirent, "w")
                for line in inf:
                    ent = json.loads(line)
                    for key, val in ent.iteritems():
                        if dirent == "int":
                            m = re_project_object.match(key)
                            if m:
                                app = m.group(1)
                                col_key = "data-%s" % app
                                if col_key in val:
                                    col_val = json.loads(val[col_key])
                                    col_val["storage"] = 2
                                    col_val["keyspace"] = "games"
                                    val[col_key] = json.dumps(col_val)
                        outf.write(json.dumps({key: val}))
                        outf.write("\n")
                outf.close()
        else:
            try:
                os.mkdir("new/%s" % dirent)
            except OSError:
                pass
            outf = open("new/%s/Data.json" % dirent, "w")
            for line in inf:
                outf.write(line)
            outf.close()
        inf.close()

def main():
    try:
        os.mkdir("new/games")
        created = set()
        for dirent in dircache.listdir("old"):
            info = os.stat("old/%s" % dirent)
            if info.st_mode & 040000:
                convert_db(dirent, created)
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

