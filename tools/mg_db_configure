#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

# This file is a part of Metagam project.
#
# Metagam is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# Metagam is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Metagam.  If not, see <http://www.gnu.org/licenses/>.

from mg import *
from concurrence import dispatch, quit
import os
import logging
import sys
import json
import re
import time

key_cache_size = 5000
key_cache_save_period_in_seconds = 3600
gc_grace_seconds = 86400 * 10
min_compaction_threshold = 2
max_compaction_threshold = 2
replicate_on_write = True

def main():
    try:
        if len(sys.argv) != 2:
            print "usage: mg_db_configure <keyspace>"
            os._exit(1)
        inst = Instance("db_cleanup")
        inst.download_config()
        mc = Memcached(inst.mcpool)
        db = inst.dbpool.sys_connection()
        while True:
            versions = db.cass.describe_schema_versions()
            ver_list = [v for v in versions.keys() if v != 'UNREACHABLE']
            if len(ver_list) < 2:
                #print "Cluster schema agree: %s" % versions
                break
            else:
                print "Cluster schema not yet agree: %s" % versions
                Tasklet.sleep(3)
        db.cass.set_keyspace("system")
        for cfdef in db.cass.describe_keyspace(sys.argv[1]).cf_defs:
            changed = False
            if cfdef.key_cache_size != key_cache_size:
                cfdef.key_cache_size = key_cache_size
                changed = True
            if cfdef.key_cache_save_period_in_seconds != key_cache_save_period_in_seconds:
                cfdef.key_cache_save_period_in_seconds = key_cache_save_period_in_seconds
                changed = True
            if cfdef.gc_grace_seconds != gc_grace_seconds:
                cfdef.gc_grace_seconds = gc_grace_seconds
                changed = True
            if cfdef.replicate_on_write != replicate_on_write:
                cfdef.replicate_on_write = replicate_on_write
                changed = True
            if cfdef.min_compaction_threshold != min_compaction_threshold:
                cfdef.min_compaction_threshold = min_compaction_threshold
                changed = True
            if cfdef.max_compaction_threshold != max_compaction_threshold:
                cfdef.max_compaction_threshold = max_compaction_threshold
                changed = True
            if changed:
                print "updating %s.%s" % (cfdef.keyspace, cfdef.name)
                retry = True
                while retry:
                    retry = False
                    try:
                        db.cass.set_keyspace(cfdef.keyspace)
                        db.cass.system_update_column_family(cfdef)
                    except InvalidRequestException as e:
                        if e.why == "Cluster schema does not yet agree":
                            retry = True
                        else:
                            raise
                while True:
                    versions = db.cass.describe_schema_versions()
                    ver_list = [v for v in versions.keys() if v != 'UNREACHABLE']
                    if len(ver_list) < 2:
                        print "Cluster schema agree: %s" % versions
                        break
                    else:
                        print "Cluster schema not yet agree: %s" % versions
                        Tasklet.sleep(3)
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

