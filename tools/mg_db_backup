#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

# This file is a part of Metagam project.
#
# Metagam is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# Metagam is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Metagam.  If not, see <http://www.gnu.org/licenses/>.

from mg import *
from concurrence import dispatch, quit, Semaphore
import os
import logging
import sys
import json
import re

token_ring = 2 ** 127
parts = 1
token_part = token_ring / parts

def db_backup(semaphore, ksdef):
    try:
        with semaphore:
            keyspace = ksdef.name
            db = CassandraConnection((sys.argv[1], 9160))
            db.connect()
            db.cass.set_keyspace(keyspace)
            os.mkdir(keyspace)
            for cf in ksdef.cf_defs:
                family = cf.name
                print "%s.%s" % (keyspace, family)
                filename = "%s/%s.json" % (keyspace, family)
                f = open(filename, "w")
                for part in xrange(0, parts):
                    start_token = '%d' % (part * token_part)
                    end_token = '%d' % (((part + 1) * token_part) % token_ring)
                    lst = db.cass.get_range_slices(ColumnParent(family), SlicePredicate(slice_range=SliceRange("", "", False, 1000000000)), KeyRange(count=10000000, start_token=start_token, end_token=end_token), ConsistencyLevel.ONE)
                    for ent in lst:
                        if len(ent.columns):
                            columns = {}
                            for col in ent.columns:
                                columns[col.column.name] = col.column.value
                            row = {ent.key: columns}
                            f.write(json.dumps(row))
                            f.write("\n")
                f.close()
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

def main():
    try:
        if len(sys.argv) != 2:
            sys.stderr.write("usage: mg_db_backup <db_host>\n")
            os._exit(1)
        # logging
        modlogger = logging.getLogger("")
        modlogger.setLevel(logging.DEBUG)
        stderr_channel = logging.StreamHandler()
        stderr_channel.setLevel(logging.DEBUG)
        modlogger.addHandler(stderr_channel)
        # parallel processing
        semaphore = Semaphore(8)
        tasklets = []
        # database
        db = CassandraConnection((sys.argv[1], 9160))
        db.connect()
        for ksdef in db.cass.describe_keyspaces():
            keyspace = ksdef.name
            if keyspace == "system" or keyspace == "ringtest":
                continue
            tasklets.append(Tasklet.new(db_backup)(semaphore, ksdef))
        for tasklet in tasklets:
            Tasklet.join(tasklet)
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

