#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

# This file is a part of Metagam project.
#
# Metagam is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# Metagam is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Metagam.  If not, see <http://www.gnu.org/licenses/>.

from mg import *
from concurrence import dispatch, quit
import os
import logging
import sys
import json
import re

token_ring = 2 ** 127
parts = 256
token_part = token_ring / parts
re_app = re.compile(r'^(.+?)-(.+)$')
re_std_index = re.compile(r'^([A-Za-z]+)-(all|created|updated|last_login|valid_till|at|performed|published|user)$')
re_index = re.compile(r'^([A-Za-z]+)-(name|channel-loc|wmid|user|app-unique|admin|owner|notify-any|any|group|player|session-performed|session|project|app-at|ip-performed|email)-(.+)$')
re_std_object = re.compile(r'(HookGroupModules|ConfigGroup|DaemonStatus|WorkerStatus|Domain|Schedule)-(.+)')
re_object = re.compile(r'^([A-Za-z]+)-([0-9a-f]{32})$')

def main():
    try:
        db = CassandraConnection(("director-db", 9160))
        db.connect()
        db.set_keyspace("main")
        # loading database
        created = set()
        for part in xrange(0, parts):
            start_token = '%d' % (part * token_part)
            end_token = '%d' % (((part + 1) * token_part) % token_ring)

            # Loading Objects (in the old format)
            for ent in db.cass.get_range_slices(ColumnParent("Objects"), SlicePredicate(slice_range=SliceRange("", "", False, 1000000000)), KeyRange(count=10000000, start_token=start_token, end_token=end_token), ConsistencyLevel.ONE):
                m = re_app.match(ent.key)
                if m and len(ent.columns):
                    app, key = m.group(1, 2)
                    # app is the application tag
                    # key may be or Object (ClassName-UUID) or Index (ClassName-IndexName(-IndexEquals)*)

                    # Guessing application class and fetching workers for this class
                    if app == "povareshkin":
                        app_cls = "povareshkin"
                    elif app == "comfort":
                        app_cls = "comfort"
                    elif app == "joyteam":
                        app_cls = "joyteam"
                    else:
                        app_cls = "metagam"

                    # Enumerating all indexes and trying to guess - whether this record is Object or Index
                    m = re_std_index.match(key)
                    if m:
                        cls, index_name = m.group(1, 2)
                        family = "Index_%s" % re.sub(r'[^a-zA-Z0-9_]', '_', index_name)
                        uuid = "eq"
                    else:
                        m = re_index.match(key)
                        if m:
                            cls, index_name, equal = m.group(1, 2, 3)
                            family = "Index_%s" % re.sub(r'[^a-zA-Z0-9_]', '_', index_name)
                            uuid = "eq-%s" % equal
                        else:
                            m = re_std_object.match(key)
                            if m:
                                cls, uuid = m.group(1, 2)
                                family = "Objects"
                            else:
                                m = re_object.match(key)
                                if m:
                                    cls, uuid = m.group(1, 2)
                                    family = "Objects"
                                else:
                                    print "Invalid key '%s' in Objects" % key
                                    continue

                    # Storing row
                    try:
                        os.mkdir(app)
                    except OSError:
                        pass
                    filename = "%s/%s_%s.json" % (app, cls, family)
                    f = open(filename, "a" if filename in created else "w")
                    created.add(filename)
                    cols = dict([(col.column.name if col.column.name != "data" or family != "Objects" else "data-%s" % uuid, col.column.value) for col in ent.columns])
                    f.write(json.dumps({uuid: cols}))
                    f.write("\n")
                    f.close()
            for ent in db.cass.get_range_slices(ColumnParent("Indexes"), SlicePredicate(slice_range=SliceRange("", "", False, 1000000000)), KeyRange(count=10000000, start_token=start_token, end_token=end_token), ConsistencyLevel.ONE):
                m = re_app.match(ent.key)
                if m and len(ent.columns):
                    app, key = m.group(1, 2)
                    # app is the application tag
                    family = "Search"
                    m = re_key.match(key)
                    if m:
                        cls, uuid = m.group(1, 2)
                    else:
                        cls = key
                        uuid = "*"

                    # Storing row
                    try:
                        os.mkdir(app)
                    except OSError:
                        pass
                    filename = "%s/%s_%s.json" % (app, cls, family)
                    f = open(filename, "a" if filename in created else "w")
                    created.add(filename)
                    cols = dict([(col.column.name, col.column.value) for col in ent.columns])
                    f.write(json.dumps({uuid: cols}))
                    f.write("\n")
                    f.close()
        sys.stdout.flush()
        os._exit(0)
    except RuntimeError as e:
        logging.error(e)
        os._exit(1)
    except Exception as e:
        logging.exception(e)
        os._exit(1)

dispatch(main)

